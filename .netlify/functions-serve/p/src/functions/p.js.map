{
  "version": 3,
  "sources": ["../../node_modules/simple-instagram-api/dist/index.js", "../../functions/p.ts"],
  "sourceRoot": "/Users/monjiang/iget-func/.netlify/functions-serve",
  "sourcesContent": ["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar https_1 = __importDefault(require(\"https\"));\r\nvar InstagramApi = /** @class */ (function () {\r\n    function InstagramApi() {\r\n    }\r\n    InstagramApi.get = function (code) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var htmlPage, regexResults, additionalData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!code)\r\n                            throw new Error('Post code is required.');\r\n                        if (!code.match(/^[a-zA-Z0-9_-]*$/gi))\r\n                            throw new Error('Invalid post code.');\r\n                        return [4 /*yield*/, InstagramApi.sendHttpRequest(InstagramApi.getEmbedUrl(code))];\r\n                    case 1:\r\n                        htmlPage = _a.sent();\r\n                        regexResults = /window\\.__additionalDataLoaded\\('extra',(.*?)\\);<\\/script>/gs.exec(htmlPage);\r\n                        if (!regexResults)\r\n                            throw new Error('Regex failed! Could not get additional data');\r\n                        additionalData = JSON.parse(regexResults[1]);\r\n                        if (additionalData) {\r\n                            return [2 /*return*/, InstagramApi.mapAdditionalData(additionalData)];\r\n                        }\r\n                        return [2 /*return*/, InstagramApi.mapHtmlPage(htmlPage)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    InstagramApi.mapAdditionalData = function (data) {\r\n        var media = data.shortcode_media;\r\n        return {\r\n            // type: media.__typename,\r\n            id: media.id,\r\n            code: media.shortcode,\r\n            is_video: media.is_video,\r\n            url: media.video_url || media.display_url,\r\n            caption: media.edge_media_to_caption ? media.edge_media_to_caption.edges[0].node.text : undefined,\r\n            children: media.edge_sidecar_to_children\r\n                ? InstagramApi.mapPostChildren(media.edge_sidecar_to_children.edges)\r\n                : [],\r\n        };\r\n    };\r\n    InstagramApi.mapPostChildren = function (children) {\r\n        return children.map(function (edge) {\r\n            return {\r\n                // type: edge.node.__typename,\r\n                id: edge.node.id,\r\n                code: edge.node.shortcode,\r\n                is_video: edge.node.is_video,\r\n                url: edge.node.video_url || edge.node.display_url,\r\n            };\r\n        });\r\n    };\r\n    InstagramApi.mapHtmlPage = function (html) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var regexMediaIdResult, regexCodeResult, regexUrlResult, caption, regexCaptionResult, regexMediaTypeResult, regexVideoUrlResult, _a, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        regexMediaIdResult = /data-media-id=\"(.*?)\"/gs.exec(html);\r\n                        if (!regexMediaIdResult)\r\n                            throw new Error('Could not extract post media id');\r\n                        regexCodeResult = /instagram\\.com\\/p\\/(.*?)\\//gs.exec(html);\r\n                        if (!regexCodeResult)\r\n                            throw new Error('Could not extract post code');\r\n                        regexUrlResult = /class=\"Content(.*?)src=\"(.*?)\"/gs.exec(html);\r\n                        if (!regexUrlResult)\r\n                            throw new Error('Could not extract post url');\r\n                        regexCaptionResult = /class=\"Caption\"(.*?)class=\"CaptionUsername\"(.*?)<\\/a>(.*?)<div/gs.exec(html);\r\n                        /**\r\n                         * Replace all html tags and trim the result\r\n                         */\r\n                        if (regexCaptionResult)\r\n                            caption = regexCaptionResult[3].replace(/<[^>]*>/g, '').trim();\r\n                        regexMediaTypeResult = /data-media-type=\"(.*?)\"/gs.exec(html);\r\n                        if (regexMediaTypeResult && regexMediaTypeResult[1] !== 'GraphVideo') {\r\n                            return [2 /*return*/, {\r\n                                    id: regexMediaIdResult[1],\r\n                                    code: regexCodeResult[1],\r\n                                    is_video: false,\r\n                                    url: decodeURI(regexUrlResult[2]).replace(/amp;/g, ''),\r\n                                    caption: caption,\r\n                                    children: [],\r\n                                }];\r\n                        }\r\n                        _b = (_a = /property=\"og:video\" content=\"(.*?)\"/).exec;\r\n                        return [4 /*yield*/, InstagramApi.sendHttpRequest(InstagramApi.getReelUrl(regexCodeResult[1]))];\r\n                    case 1:\r\n                        regexVideoUrlResult = _b.apply(_a, [_c.sent()]);\r\n                        if (!regexVideoUrlResult)\r\n                            throw new Error('Could not fetch reel video url');\r\n                        return [2 /*return*/, {\r\n                                id: regexMediaIdResult[1],\r\n                                code: regexCodeResult[1],\r\n                                is_video: true,\r\n                                url: regexVideoUrlResult[1],\r\n                                caption: caption,\r\n                                children: [],\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    InstagramApi.getEmbedUrl = function (postCode) {\r\n        return \"https://www.instagram.com/p/\" + postCode + \"/embed/captioned/\";\r\n    };\r\n    InstagramApi.getReelUrl = function (postCode) {\r\n        return \"https://www.instagram.com/reel/\" + postCode + \"/\";\r\n    };\r\n    InstagramApi.sendHttpRequest = function (url) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        https_1.default\r\n                            .get(url, function (resp) {\r\n                            var data;\r\n                            // A chunk of data has been received.\r\n                            resp.on('data', function (chunk) {\r\n                                data += chunk;\r\n                            });\r\n                            // The whole response has been received.\r\n                            resp.on('end', function () {\r\n                                return resolve(data);\r\n                            });\r\n                        })\r\n                            .on('error', function (err) {\r\n                            return reject(err);\r\n                        });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    return InstagramApi;\r\n}());\r\nexports.default = InstagramApi;\r\n", "import { Handler, HandlerEvent } from \"@netlify/functions\";\nimport InstagramApi from \"simple-instagram-api\";\n\nconst handler: Handler = async (req: HandlerEvent, context) => {\n    const a = req.path.replace('/api/p/', '');\n    try {\n        const p = await InstagramApi.get(a);\n        if (!p.children.length) {\n            return {\n                statusCode: 200,\n                body: JSON.stringify({url: [p.url]})\n            }\n        } else {\n            return {\n                statusCode: 200,\n                body: JSON.stringify({ url: p.children.map((e) => e.url)})\n            }\n        }\n    } catch (error) {\n        console.log(error);\n        return {\n            statusCode: 500,\n            body: JSON.stringify({ error: 'Faild fecthing posts'})\n        }\n    }\n}\n\nexport { handler }"],
  "mappings": "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",
  "names": []
}
